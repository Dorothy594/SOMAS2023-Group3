package objects

import (
	utils "SOMAS2023/internal/common/utils"
	voting "SOMAS2023/internal/common/voting"
	basebiker "SOMAS2023/internal/common/objects/basebiker"
	"math"

	"math/rand"

	baseAgent "github.com/MattSScott/basePlatformSOMAS/BaseAgent"
	"github.com/google/uuid"
)


// Add all of our constants here
const deviateNegative = -0.3
const deviatePositive = 0.2
const leave = 0.2
const kick = 0.4



type Biker1 struct {
	*baseAgent.BaseAgent[IBaseBiker]              // BaseBiker inherits functions from BaseAgent such as GetID(), GetAllMessages() and UpdateAgentInternalState()
	soughtColour                     utils.Colour // the colour of the lootbox that the agent is currently seeking
	onBike                           bool
	energyLevel                      float64 // float between 0 and 1
	points                           int
	alive                            bool
	forces                           utils.Forces
	megaBikeId                       uuid.UUID  // if they are not on a bike it will be 0
	gameState                        IGameState // updated by the server at every round
	allocationParams                 ResourceAllocationParams
	deviateNegative = -0.3			// trust loss on deviation
	deviatePositive = 0.2			// trust gain on non deviation
	leaveThreshold = 0.2			// threshold for leaving
	kickThreshhold = 0.4			// threshold for kicking
	fairnessConstant = 1			// weight of fairness in opinion
	trustconstant = 1				// weight of trust in opinion
	effortConstant = 1				// weight of effort in opinion
	fairnessDifference = 0.5		// modifies how much fairness increases of decreases, higher is more increase, 0.5 is fair
	lowEnergyLevel = 0.3			// energy level below which the agent will try to get a lootbox of the desired colour
}

func (bb *BaseBiker) GetFellowBikers() []IAgent {
	return bb.gameState.GetMegaBikes()[bikeID].GetAgents()
}

// through this function the agent submits their desired allocation of resources
// in the MVP each agent returns 1 whcih will cause the distribution to be equal across all of them
func (bb *BaseBiker) DecideAllocation() voting.IdVoteMap {
	bikeID := bb.GetBike()
	fellowBikers := bb.gameState.GetMegaBikes()[bikeID].GetAgents()
	distribution := make(voting.IdVoteMap)
	for _, agent := range fellowBikers {
		if agent.GetID() == bb.GetID() {
			distribution[agent.GetID()] = 1.0
		} else {
			distribution[agent.GetID()] = 0.0
		}
	}
	return distribution
}

func (bb *BaseBiker) nearestLootColor() uuid.UUID {
	currLocation := bb.GetLocation()
	shortestDist := math.MaxFloat64
	var nearestBox uuid.UUID
	var currDist float64
	for _, loot := range bb.gameState.GetLootBoxes() {
		x, y := loot.GetPosition().X, loot.GetPosition().Y
		currDist = math.Sqrt(math.Pow(currLocation.X-x, 2) + math.Pow(currLocation.Y-y, 2))
		if (currDist < shortestDist) && (loot.GetColour() == bb.soughtColour){
			nearestBox = loot.GetID()
			shortestDist = currDist
		}
	}
	return nearestBox
}

func (bb *BaseBiker) nearestLootColorIntermediate() uuid.UUID {
	nearestColorBox := bb.nearestLootColor()
	x2, y2 := bb.gameState.GetLootBoxes()[nearestColorBox].GetPosition().X, bb.gameState.GetLootBoxes()[nearestColorBox].GetPosition().Y
	currLocation := bb.GetLocation()
	shortestDist := math.MaxFloat64
	var nearestBox uuid.UUID
	var currDist float64
	for _, loot := range bb.gameState.GetLootBoxes() {
		x1, y1 := loot.GetPosition().X, loot.GetPosition().Y
		currDist = math.Sqrt(math.Pow(currLocation.X-x1, 2) + math.Pow(currLocation.Y-y1, 2))+math.Sqrt(math.Pow(x1-x2, 2) + math.Pow(y1-y2, 2))
		if (currDist < shortestDist){
			nearestBox = loot.GetID()
			shortestDist = currDist
		}
	}
	return nearestBox
}



// in the MVP the biker's action defaults to pedaling (as it won't be able to change bikes)
// in future implementations this function will be overridden by the agent's specific strategy
// which will be used to determine whether to pedalor try to change bike
func (bb *BaseBiker) DecideAction() BikerAction {
	fellowBikers := bb.GetFellowBikers()
	avg_opinion := 1.0
	for _, agent := range fellowBikers {
		avg_opinion := avg_opinion + bb.Opinion.opinion[agent.GetID()]
	}
	if avg_opinion < leaveThreshold {
		return ChangeBike
	} else {
		return Pedal
	}
}

// determine the forces (pedalling, breaking and turning)
// in the MVP the pedalling force will be 1, the breaking 0 and the tunring is determined by the
// location of the nearest lootbox

// the function is passed in the id of the voted lootbox, for now ignored
func (bb *BaseBiker) DecideForce(direction uuid.UUID) {

	// NEAREST BOX STRATEGY (MVP)
	currLocation := bb.GetLocation()
	nearestLoot := bb.nearestLoot()
	currentLootBoxes := bb.gameState.GetLootBoxes()

	// Check if there are lootboxes available and move towards closest one
	if len(currentLootBoxes) > 0 {
		targetPos := currentLootBoxes[nearestLoot].GetPosition()

		deltaX := targetPos.X - currLocation.X
		deltaY := targetPos.Y - currLocation.Y
		angle := math.Atan2(deltaX, deltaY)
		angleInDegrees := angle * math.Pi / 180

		// Default BaseBiker will always
		turningDecision := utils.TurningDecision{
			SteerBike:     true,
			SteeringForce: angleInDegrees,
		}

		nearestBoxForces := utils.Forces{
			Pedal:   utils.BikerMaxForce*bb.GetEnergyLevel(),
			Brake:   0.0,
			Turning: turningDecision,
		}
		bb.forces = nearestBoxForces
	} else { // otherwise move away from audi
		audiPos := bb.GetGameState().GetAudi().GetPosition()

		deltaX := audiPos.X - currLocation.X
		deltaY := audiPos.Y - currLocation.Y

		// Steer in opposite direction to audi
		angle := math.Atan2(-deltaX, -deltaY)
		angleInDegrees := angle * math.Pi / 180

		// Default BaseBiker will always
		turningDecision := utils.TurningDecision{
			SteerBike:     true,
			SteeringForce: angleInDegrees,
		}

		escapeAudiForces := utils.Forces{
			Pedal:   utils.BikerMaxForce,
			Brake:   0.0,
			Turning: turningDecision,
		}
		bb.forces = escapeAudiForces
	}
}

// initialise maps for opinions
type Opinion struct {
	effort := make(map[uuid.UUID]float64)
	trust := make(map[uuid.UUID]float64)
	fairness := make(map[uuid.UUID]float64)
	opionion := make(map[uuid.UUID]float64)
}


// Functions to update different opinion metrics
func (bb *BaseBiker) UpdateEffort int {
	fellowBikers := bb.GetFellowBikers()
	for _, agent := range fellowBikers {
		bb.Opinion.effort[agent.GetID()] := (agent.forces.Pedal - bb.forces.Pedal) / agent.GetEnergyLevel()
	}
}

func (bb *BaseBiker) UpdateTrust int {
	fellowBikers := bb.GetFellowBikers()
	for _, agent := range fellowBikers {
		if agent.forces.TurningDecision.SteeringForce == bb.forces.TurningDecision.SteeringForce {
			bb.Opinions.trust[agent.GetID()] := trust[agent.GetID()] + bb.positiveDeviate
		} else {
			bb.Opinion.trust[agent.GetID()] := trust[agent.GetID()] + bb.deviateNegative
		}
	}
}

func (bb *BaseBiker) UpdateFairness int {
	fellowBikers := bb.gameState.GetMegaBikes()[bikeID].GetAgents()
	for _, agent := range fellowBikers {
		difference := 0.0
		for ourVote in voting.IdVoteMap[bb.GetID()]:
			for theirVote in voting.IdVoteMap[agent.GetID()]:
				difference := difference + math.Abs(ourVote - theirVote)
		bb.Opinion.fairness[agent.GetID()] := fairness[agent.GetID()] + bb.fairnessDifference - difference/2
	}
}

func (bb *BaseBiker) UpdateOpinions int {
	bb.UpdateTrust()
	bb.UpdateEffort()
	bb.UpdateFairness()
	fellowBikers := bb.GetFellowBikers()
	for _, agent := range fellowBikers {
		bb.Opinion.opinion[agent.GetID()] := (bb.Opinion.trust[agent.GetID()]*trustconstant + bb.Opinion.effort[agent.GetID()]*effortConstant + bb.Opinion.fairness[agent.GetID()]*fairnessConstant) / (trustconstant + effortConstant + fairnessConstant)
	}
}







func (bb *BaseBiker) GetSubjectiveEnergeDisparities map[uuid.UUID]float {
	fellowBikers := bb.GetFellowBikers()
	disparities := make(map[uuid.UUID]float)
	//find the maximum difference in energy between ourselves and any agent
	maxDiff := 0.0
	var diff float
	for them := range fellowBikers {
		diff = math.Abs(them.GetEnergyLevel() - bb.GetEnergyLevel())
		if diff > maxDiff {
			maxDiff = diff
		}
	}
	//Calculate Subjective disparities as (them.energy - us.energy) / max energy diff
	for them := range fellowBikers{
		disparities[them.GetID()] = (them.GetEnergyLevel() - bb.GetEnergyLevel()) / maxDiff
	}
	
	return disparities
}

// decide which bike to go to
// for now it just returns a random uuid
func (bb *BaseBiker) ChangeBike() uuid.UUID {
	return uuid.New()
}

func (bb *BaseBiker) SetBike(bikeId uuid.UUID) {
	bb.megaBikeId = bikeId
}

func (bb *BaseBiker) GetBike() uuid.UUID {
	return bb.megaBikeId
}

// this is called when a lootbox of the desidered colour has been looted in order to update the sought colour
func (bb *BaseBiker) UpdateColour(totColours utils.Colour) {
	bb.soughtColour = utils.Colour(rand.Intn(int(totColours)))
}

// update the points at the end of a round
func (bb *BaseBiker) UpdatePoints(pointsGained int) {
	bb.points += pointsGained
}

func (bb *BaseBiker) GetLifeStatus() bool {
	return bb.alive
}

func (bb *BaseBiker) GetForces() utils.Forces {
	return bb.forces
}

func (bb *BaseBiker) UpdateGameState(gameState IGameState) {
	bb.gameState = GetGameState
	bb.UpdateOpinions()
}

func (bb *BaseBiker) GetResourceAllocationParams() ResourceAllocationParams {
	return bb.allocationParams
}

// default implementation returns the id of the nearest lootbox
func (bb *BaseBiker) ProposeDirection() uuid.UUID {
	return bb.nearestLootColorIntermediate()
}

func (bb *BaseBiker) ToggleOnBike() {
	bb.onBike = !bb.onBike
}

func (bb *BaseBiker) GetBikeStatus() bool {
	return bb.onBike
}

func (bb *BaseBiker) GetGameState() IGameState {
	return bb.gameState
}

func (bb *BaseBiker) GetMegaBikeId() uuid.UUID {
	return bb.megaBikeId
}

// an agent will have to rank the agents that are trying to join and that they will try to
func (bb *BaseBiker) DecideJoining(pendingAgents []uuid.UUID) map[uuid.UUID]bool {
	decision := make(map[uuid.UUID]bool)
	for _, agent := range pendingAgents {
		if agent.soughtColour == bb.soughtColour {
			decision[agent] = true
		} else {
			decision[agent] = false
		}
	}
	return decision
}

// this function will contain the agent's strategy on deciding which direction to go to
// the default implementation returns an equal distribution over all options
// this will also be tried as returning a rank of options
func (bb *BaseBiker) FinalDirectionVote(proposals []uuid.UUID) voting.LootboxVoteMap {
	votes := make(voting.LootboxVoteMap)
	totOptions := len(proposals)
	normalDist := 1.0 / float64(totOptions)
	for _, proposal := range proposals {
		votes[proposal] = normalDist
	}
	return votes
}

// this function is going to be called by the server to instantiate bikers in the MVP
func GetIBaseBiker(totColours utils.Colour, bikeId uuid.UUID) IBaseBiker {
	return &BaseBiker{
		BaseAgent:    baseAgent.NewBaseAgent[IBaseBiker](),
		soughtColour: utils.GenerateRandomColour(),
		onBike:       true,
		energyLevel:  1.0,
		points:       0,
		alive:        true,
	}
}

// this function will be used by GetTeamAgent to get the ref to the BaseBiker
func GetBaseBiker(totColours utils.Colour, bikeId uuid.UUID) *BaseBiker {
	return &BaseBiker{
		BaseAgent:    baseAgent.NewBaseAgent[IBaseBiker](),
		soughtColour: utils.GenerateRandomColour(),
		onBike:       true,
		energyLevel:  1.0,
		points:       0,
		alive:        true,
	}
}